// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: index.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_index_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_index_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_index_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_index_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_index_2eproto;
namespace IndexRpc {
class IndexReply;
struct IndexReplyDefaultTypeInternal;
extern IndexReplyDefaultTypeInternal _IndexReply_default_instance_;
class IndexSend;
struct IndexSendDefaultTypeInternal;
extern IndexSendDefaultTypeInternal _IndexSend_default_instance_;
}  // namespace IndexRpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace IndexRpc {

// ===================================================================


// -------------------------------------------------------------------

class IndexSend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:IndexRpc.IndexSend) */ {
 public:
  inline IndexSend() : IndexSend(nullptr) {}
  ~IndexSend() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IndexSend(
      ::google::protobuf::internal::ConstantInitialized);

  inline IndexSend(const IndexSend& from) : IndexSend(nullptr, from) {}
  inline IndexSend(IndexSend&& from) noexcept
      : IndexSend(nullptr, std::move(from)) {}
  inline IndexSend& operator=(const IndexSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexSend& operator=(IndexSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexSend* internal_default_instance() {
    return reinterpret_cast<const IndexSend*>(
        &_IndexSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(IndexSend& a, IndexSend& b) { a.Swap(&b); }
  inline void Swap(IndexSend* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexSend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexSend* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IndexSend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IndexSend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IndexSend& from) { IndexSend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IndexSend* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "IndexRpc.IndexSend"; }

 protected:
  explicit IndexSend(::google::protobuf::Arena* arena);
  IndexSend(::google::protobuf::Arena* arena, const IndexSend& from);
  IndexSend(::google::protobuf::Arena* arena, IndexSend&& from) noexcept
      : IndexSend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentDescFieldNumber = 1,
  };
  // string contentDesc = 1;
  void clear_contentdesc() ;
  const std::string& contentdesc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contentdesc(Arg_&& arg, Args_... args);
  std::string* mutable_contentdesc();
  PROTOBUF_NODISCARD std::string* release_contentdesc();
  void set_allocated_contentdesc(std::string* value);

  private:
  const std::string& _internal_contentdesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contentdesc(
      const std::string& value);
  std::string* _internal_mutable_contentdesc();

  public:
  // @@protoc_insertion_point(class_scope:IndexRpc.IndexSend)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      38, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IndexSend_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IndexSend& from_msg);
    ::google::protobuf::internal::ArenaStringPtr contentdesc_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class IndexReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:IndexRpc.IndexReply) */ {
 public:
  inline IndexReply() : IndexReply(nullptr) {}
  ~IndexReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IndexReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline IndexReply(const IndexReply& from) : IndexReply(nullptr, from) {}
  inline IndexReply(IndexReply&& from) noexcept
      : IndexReply(nullptr, std::move(from)) {}
  inline IndexReply& operator=(const IndexReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexReply& operator=(IndexReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexReply* internal_default_instance() {
    return reinterpret_cast<const IndexReply*>(
        &_IndexReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(IndexReply& a, IndexReply& b) { a.Swap(&b); }
  inline void Swap(IndexReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IndexReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IndexReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IndexReply& from) { IndexReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IndexReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "IndexRpc.IndexReply"; }

 protected:
  explicit IndexReply(::google::protobuf::Arena* arena);
  IndexReply(::google::protobuf::Arena* arena, const IndexReply& from);
  IndexReply(::google::protobuf::Arena* arena, IndexReply&& from) noexcept
      : IndexReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVarIDFieldNumber = 3,
    kVarNameFieldNumber = 4,
    kDirPathFieldNumber = 5,
    kFilePathFieldNumber = 6,
    kSpaceIDFieldNumber = 1,
    kTimeIDFieldNumber = 2,
  };
  // repeated int32 varID = 3;
  int varid_size() const;
  private:
  int _internal_varid_size() const;

  public:
  void clear_varid() ;
  ::int32_t varid(int index) const;
  void set_varid(int index, ::int32_t value);
  void add_varid(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& varid() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_varid();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_varid() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_varid();

  public:
  // repeated string varName = 4;
  int varname_size() const;
  private:
  int _internal_varname_size() const;

  public:
  void clear_varname() ;
  const std::string& varname(int index) const;
  std::string* mutable_varname(int index);
  void set_varname(int index, const std::string& value);
  void set_varname(int index, std::string&& value);
  void set_varname(int index, const char* value);
  void set_varname(int index, const char* value, std::size_t size);
  void set_varname(int index, absl::string_view value);
  std::string* add_varname();
  void add_varname(const std::string& value);
  void add_varname(std::string&& value);
  void add_varname(const char* value);
  void add_varname(const char* value, std::size_t size);
  void add_varname(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& varname() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_varname();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_varname() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_varname();

  public:
  // repeated string dirPath = 5;
  int dirpath_size() const;
  private:
  int _internal_dirpath_size() const;

  public:
  void clear_dirpath() ;
  const std::string& dirpath(int index) const;
  std::string* mutable_dirpath(int index);
  void set_dirpath(int index, const std::string& value);
  void set_dirpath(int index, std::string&& value);
  void set_dirpath(int index, const char* value);
  void set_dirpath(int index, const char* value, std::size_t size);
  void set_dirpath(int index, absl::string_view value);
  std::string* add_dirpath();
  void add_dirpath(const std::string& value);
  void add_dirpath(std::string&& value);
  void add_dirpath(const char* value);
  void add_dirpath(const char* value, std::size_t size);
  void add_dirpath(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& dirpath() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dirpath();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dirpath() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dirpath();

  public:
  // repeated string filePath = 6;
  int filepath_size() const;
  private:
  int _internal_filepath_size() const;

  public:
  void clear_filepath() ;
  const std::string& filepath(int index) const;
  std::string* mutable_filepath(int index);
  void set_filepath(int index, const std::string& value);
  void set_filepath(int index, std::string&& value);
  void set_filepath(int index, const char* value);
  void set_filepath(int index, const char* value, std::size_t size);
  void set_filepath(int index, absl::string_view value);
  std::string* add_filepath();
  void add_filepath(const std::string& value);
  void add_filepath(std::string&& value);
  void add_filepath(const char* value);
  void add_filepath(const char* value, std::size_t size);
  void add_filepath(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& filepath() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filepath();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filepath() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filepath();

  public:
  // int32 spaceID = 1;
  void clear_spaceid() ;
  ::int32_t spaceid() const;
  void set_spaceid(::int32_t value);

  private:
  ::int32_t _internal_spaceid() const;
  void _internal_set_spaceid(::int32_t value);

  public:
  // int32 TimeID = 2;
  void clear_timeid() ;
  ::int32_t timeid() const;
  void set_timeid(::int32_t value);

  private:
  ::int32_t _internal_timeid() const;
  void _internal_set_timeid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndexRpc.IndexReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IndexReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IndexReply& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> varid_;
    mutable ::google::protobuf::internal::CachedSize _varid_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> varname_;
    ::google::protobuf::RepeatedPtrField<std::string> dirpath_;
    ::google::protobuf::RepeatedPtrField<std::string> filepath_;
    ::int32_t spaceid_;
    ::int32_t timeid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexSend

// string contentDesc = 1;
inline void IndexSend::clear_contentdesc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contentdesc_.ClearToEmpty();
}
inline const std::string& IndexSend::contentdesc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexSend.contentDesc)
  return _internal_contentdesc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexSend::set_contentdesc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contentdesc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:IndexRpc.IndexSend.contentDesc)
}
inline std::string* IndexSend::mutable_contentdesc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contentdesc();
  // @@protoc_insertion_point(field_mutable:IndexRpc.IndexSend.contentDesc)
  return _s;
}
inline const std::string& IndexSend::_internal_contentdesc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contentdesc_.Get();
}
inline void IndexSend::_internal_set_contentdesc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contentdesc_.Set(value, GetArena());
}
inline std::string* IndexSend::_internal_mutable_contentdesc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contentdesc_.Mutable( GetArena());
}
inline std::string* IndexSend::release_contentdesc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:IndexRpc.IndexSend.contentDesc)
  return _impl_.contentdesc_.Release();
}
inline void IndexSend::set_allocated_contentdesc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contentdesc_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contentdesc_.IsDefault()) {
          _impl_.contentdesc_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndexRpc.IndexSend.contentDesc)
}

// -------------------------------------------------------------------

// IndexReply

// int32 spaceID = 1;
inline void IndexReply::clear_spaceid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spaceid_ = 0;
}
inline ::int32_t IndexReply::spaceid() const {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexReply.spaceID)
  return _internal_spaceid();
}
inline void IndexReply::set_spaceid(::int32_t value) {
  _internal_set_spaceid(value);
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.spaceID)
}
inline ::int32_t IndexReply::_internal_spaceid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spaceid_;
}
inline void IndexReply::_internal_set_spaceid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spaceid_ = value;
}

// int32 TimeID = 2;
inline void IndexReply::clear_timeid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeid_ = 0;
}
inline ::int32_t IndexReply::timeid() const {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexReply.TimeID)
  return _internal_timeid();
}
inline void IndexReply::set_timeid(::int32_t value) {
  _internal_set_timeid(value);
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.TimeID)
}
inline ::int32_t IndexReply::_internal_timeid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeid_;
}
inline void IndexReply::_internal_set_timeid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeid_ = value;
}

// repeated int32 varID = 3;
inline int IndexReply::_internal_varid_size() const {
  return _internal_varid().size();
}
inline int IndexReply::varid_size() const {
  return _internal_varid_size();
}
inline void IndexReply::clear_varid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.varid_.Clear();
}
inline ::int32_t IndexReply::varid(int index) const {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexReply.varID)
  return _internal_varid().Get(index);
}
inline void IndexReply::set_varid(int index, ::int32_t value) {
  _internal_mutable_varid()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.varID)
}
inline void IndexReply::add_varid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_varid()->Add(value);
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.varID)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& IndexReply::varid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:IndexRpc.IndexReply.varID)
  return _internal_varid();
}
inline ::google::protobuf::RepeatedField<::int32_t>* IndexReply::mutable_varid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:IndexRpc.IndexReply.varID)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_varid();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
IndexReply::_internal_varid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.varid_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* IndexReply::_internal_mutable_varid() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.varid_;
}

// repeated string varName = 4;
inline int IndexReply::_internal_varname_size() const {
  return _internal_varname().size();
}
inline int IndexReply::varname_size() const {
  return _internal_varname_size();
}
inline void IndexReply::clear_varname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.varname_.Clear();
}
inline std::string* IndexReply::add_varname()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_varname()->Add();
  // @@protoc_insertion_point(field_add_mutable:IndexRpc.IndexReply.varName)
  return _s;
}
inline const std::string& IndexReply::varname(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexReply.varName)
  return _internal_varname().Get(index);
}
inline std::string* IndexReply::mutable_varname(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:IndexRpc.IndexReply.varName)
  return _internal_mutable_varname()->Mutable(index);
}
inline void IndexReply::set_varname(int index, const std::string& value) {
  _internal_mutable_varname()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.varName)
}
inline void IndexReply::set_varname(int index, std::string&& value) {
  _internal_mutable_varname()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.varName)
}
inline void IndexReply::set_varname(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_varname()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexRpc.IndexReply.varName)
}
inline void IndexReply::set_varname(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_varname()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexRpc.IndexReply.varName)
}
inline void IndexReply::set_varname(int index, absl::string_view value) {
  _internal_mutable_varname()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:IndexRpc.IndexReply.varName)
}
inline void IndexReply::add_varname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_varname()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.varName)
}
inline void IndexReply::add_varname(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_varname()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.varName)
}
inline void IndexReply::add_varname(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_varname()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndexRpc.IndexReply.varName)
}
inline void IndexReply::add_varname(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_varname()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndexRpc.IndexReply.varName)
}
inline void IndexReply::add_varname(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_varname()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:IndexRpc.IndexReply.varName)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IndexReply::varname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:IndexRpc.IndexReply.varName)
  return _internal_varname();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IndexReply::mutable_varname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:IndexRpc.IndexReply.varName)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_varname();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IndexReply::_internal_varname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.varname_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IndexReply::_internal_mutable_varname() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.varname_;
}

// repeated string dirPath = 5;
inline int IndexReply::_internal_dirpath_size() const {
  return _internal_dirpath().size();
}
inline int IndexReply::dirpath_size() const {
  return _internal_dirpath_size();
}
inline void IndexReply::clear_dirpath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dirpath_.Clear();
}
inline std::string* IndexReply::add_dirpath()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dirpath()->Add();
  // @@protoc_insertion_point(field_add_mutable:IndexRpc.IndexReply.dirPath)
  return _s;
}
inline const std::string& IndexReply::dirpath(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexReply.dirPath)
  return _internal_dirpath().Get(index);
}
inline std::string* IndexReply::mutable_dirpath(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:IndexRpc.IndexReply.dirPath)
  return _internal_mutable_dirpath()->Mutable(index);
}
inline void IndexReply::set_dirpath(int index, const std::string& value) {
  _internal_mutable_dirpath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::set_dirpath(int index, std::string&& value) {
  _internal_mutable_dirpath()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::set_dirpath(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dirpath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::set_dirpath(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_dirpath()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::set_dirpath(int index, absl::string_view value) {
  _internal_mutable_dirpath()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::add_dirpath(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_dirpath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::add_dirpath(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_dirpath()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::add_dirpath(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_dirpath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::add_dirpath(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_dirpath()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndexRpc.IndexReply.dirPath)
}
inline void IndexReply::add_dirpath(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_dirpath()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:IndexRpc.IndexReply.dirPath)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IndexReply::dirpath() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:IndexRpc.IndexReply.dirPath)
  return _internal_dirpath();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IndexReply::mutable_dirpath() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:IndexRpc.IndexReply.dirPath)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dirpath();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IndexReply::_internal_dirpath() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dirpath_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IndexReply::_internal_mutable_dirpath() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dirpath_;
}

// repeated string filePath = 6;
inline int IndexReply::_internal_filepath_size() const {
  return _internal_filepath().size();
}
inline int IndexReply::filepath_size() const {
  return _internal_filepath_size();
}
inline void IndexReply::clear_filepath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filepath_.Clear();
}
inline std::string* IndexReply::add_filepath()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filepath()->Add();
  // @@protoc_insertion_point(field_add_mutable:IndexRpc.IndexReply.filePath)
  return _s;
}
inline const std::string& IndexReply::filepath(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IndexRpc.IndexReply.filePath)
  return _internal_filepath().Get(index);
}
inline std::string* IndexReply::mutable_filepath(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:IndexRpc.IndexReply.filePath)
  return _internal_mutable_filepath()->Mutable(index);
}
inline void IndexReply::set_filepath(int index, const std::string& value) {
  _internal_mutable_filepath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::set_filepath(int index, std::string&& value) {
  _internal_mutable_filepath()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::set_filepath(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_filepath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::set_filepath(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_filepath()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::set_filepath(int index, absl::string_view value) {
  _internal_mutable_filepath()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::add_filepath(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filepath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::add_filepath(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filepath()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::add_filepath(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filepath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::add_filepath(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filepath()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndexRpc.IndexReply.filePath)
}
inline void IndexReply::add_filepath(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filepath()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:IndexRpc.IndexReply.filePath)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IndexReply::filepath() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:IndexRpc.IndexReply.filePath)
  return _internal_filepath();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IndexReply::mutable_filepath() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:IndexRpc.IndexReply.filePath)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filepath();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IndexReply::_internal_filepath() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filepath_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IndexReply::_internal_mutable_filepath() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filepath_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndexRpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_index_2eproto_2epb_2eh
